TODO:
    - functions/subroutines
    - optional unwrapping syntax
    - ownership and references
    - defining mapping providers
    - context syntax
    - laziness
    - sum types

vertically split code
    - use | as a separator

at some point:
    - first class async
    - modules
    - interactive compilation, compiler warnings and suggestions
    - check what existing languages have, rust, newer functional languages

Enum mapping types should be iterable, how to do that?
    meaning you can loop through all the values in the enum

ideas:
    - use << as append to list maybe (we have ; for monadic discard)
    - maybe we can diff the code to last git version to know what changed and produce better error messages
    - all strings are streams
    - let user take control of gc
    - define contextual isomorphisms to reduce a bunch of boilerplate
        - for example we might say that a user is isomorphic to a user_id. In this context everything that accepts a user should accept a user id and vice versa.
    - subset and range types, for example: 
        $ type mono_pair a => strict total Mapping [1..2] Int -> a
            - how about non-mono pair
                $ let pair = provider type a b => total mapping [0..1] int -> a | b

    - let could maybe be const or var depending on context
        - const globally, var locally
        - or just use const and let, whatever
            - benefits are pretty minimal, but there are maybe some
    - could we do algebra on datatypes based on isomorphism during compilation?
        - the compiler would pick a single internal representation for all of them
        - is that what haskell does?
            - could be kinda confusing

inpurity and purity, strictness, laziness
    - {}-access denotes lazy access
    - ()-access denotes impure function call
    - whitespace access denotes pure function call (this one might be iffy)
    - functions are mappings
    - specifier pure is good, but does impure mean anything?
        - maybe better to have more specific specifiers, IO, async etc...
    - {}-block denotes strictness
    - ()-block denotes non-strictness
        - sometimes this doesn't matter, sometimes it does
    - lazy and strict specifiers (lazy semantics? does a lazy function mean that it's return value is lazy?)
        - functions maybe lazy by default, datastructures strict by default
    - subset types
    - unsafe functions should end with !
        - should optional functions end with ? or is that too annoying?

about strictness and purity by inference
    - purity of functions can be left up to inference? can we, in all cases float an impure function up from a deep stack of impure ones
        - impurity leaves a trace as a specifier, so maybe we can!

    - strictness however cannot be inferred, it has to be explicit since it affects semantics
        - sometimes laziness is an implementation detail, sometimes not
        - it could be way more confusing, if with data structures we teach users that {} vs () does not affect correctness but with blocks it does
        - how about during definitions: {},[] == strict, () == non-strict, indentation == strict if impure, non-strict if pure
            - this conflicts somewhat with access operators, but oh well
        - another model would be to use {}-access to explicitly denote non-strictness, or some other access
