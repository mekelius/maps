goals:
    - have the cake and eat it too, i.e. high level abstractions without the performance problems
    - machine-code output
    - let's be green if we are able
    - c-interop is a big deal

features needed from transpilation targets:
    - closures
    - garbage collection, but can we use it as little as possible?
        - how does c++ do lambda bindings without gc btw?
    - thunks for laziness
    - recursion
    - first-class functions
    - some kind of async support?
    - type checking

weird idea: what if the runtime is optional for some programs?

compilation model:
    - probably what i'd like to do is to have both compilation and JIT
    - how about we just transpile to a bunch of langs?
    - how hard would it be to use llvm? what kind of IR would we need to target
    - transpiling to haskell gives most features we need, are there problems with that?
        - haskell toolchain is kinda big and slow
        - haskell has an existing friendly ecosystem

options:
    - some haskell IR
        + most of the pros of haskell
        + ment as a compile target
        - hard to learn I presume
        -? need the haskell toolchain

    - some llvm IR
        + efficient af
        + probably better documented and easier to learn than a haskell IR
        + fast compilation and platform independence
        + ment as a compile target
        + just curious
        - not very featureful, like writing lower level c I presume
        - still not exactly a mainstream language to learn

    - rust
        + tons of features, what exactly?
        + functional patterns supported
        + what is rust's memory model exactly
        + what's the status of laziness
        + unboxed closures
        ? what's the compilation like, how about c-interop
        - have to learn it
        - async is a mess from what I've heard
        - unknown unknows?

    - c
        + fast
        + simple
        + compiles fast
        + runs on everything
        + c-interop for free (duh)
        + recursion, first class functions
        - laziness sounds like a nightmare
        - no GC
        - no closures
        - no exceptions
        - we will mess up the allocations at some point
        +- statically typed, but no optionals and stuff, type system can be bypassed

    - haskell
        + lazy semantics
        + can be efficient
        + type system has everything
        + c-interop is there
        + lazier than us
        + close to us in a lot of ways
        + GC
        - toolchain is big and slow and clunky
        - can be stupid
        - probly some unknown unknown that fks us up
        - we'd need to watch the output pretty hard, sounds kinda problematic

    - c++
        + has a lot of features: optionals, recursion, lambdas
        + fast
        + c-interop almost for free
        - laziness sounds extremely hard
        - contexts could be done with objects, but that's maybe a bit limited
        - can be kinda slow
        - limitations on a lot of stuff
        - just sounds dumb

    - python
        + has first class functions, lambdas
        + has async stuff
        + has some laziness
        + GC
        - relatively slow
        - recursion needs to be hacked in
        - no machine code output
